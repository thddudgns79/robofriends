{"version":3,"sources":["serviceWorker.js","Components/SearchBox.js","Components/Card.js","Components/Cardlist.js","Components/Scroll.js","Components/ErrorBoundary.js","Container/App.js","index.js"],"names":["Boolean","window","location","hostname","match","SearchBox","searchfield","searchChange","className","type","placeholder","onChange","Card","id","name","email","alt","src","Cardlist","robots","map","user","i","key","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","React","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"iLAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCHSC,EAbG,SAAC,GAAiC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC9B,OACI,yBAAKC,UAAY,OACb,2BACAA,UAAY,mCACZC,KAAO,SACPC,YAAc,gBACdC,SAAYJ,MCKTK,EAZF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MACrB,OACI,yBAAKP,UAAY,uDACb,yBAAKQ,IAAM,SAASC,IAAG,+BAA4BJ,EAA5B,cACvB,6BACK,4BAAKC,GACL,2BAAIC,MCQNG,EAZE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACf,OACI,6BAEQA,EAAOC,KAAI,SAACC,EAAMC,GACd,OAAO,kBAAC,EAAD,CAAMC,IAAOD,EAAGT,GAAMM,EAAOG,GAAGT,GAAIC,KAAQK,EAAOG,GAAGR,KAAMC,MAASI,EAAOG,GAAGP,aCC3FS,EARA,SAACC,GACZ,OACE,yBAAKC,MAAS,CAACC,UAAW,SAAWC,OAAQ,kBAAmBC,OAAQ,UACnEJ,EAAMK,WCgBFC,E,kDAlBX,WAAYN,GAAO,IAAD,8BACd,cAAMA,IACDO,MAAQ,CACTC,UAAW,GAHD,E,8DAOAC,EAAOC,GACrBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI1B,OAAGG,KAAKJ,MAAMC,SACH,gEAEJG,KAAKX,MAAMK,a,GAhBEQ,IAAMC,WC6CnBC,E,kDAxCX,aAAc,IAAD,8BACT,gBAYJC,eAAiB,SAACC,GACd,EAAKL,SAAS,CAAE/B,YAAcoC,EAAMC,OAAOC,SAZ3C,EAAKZ,MAAQ,CACTb,OAAS,GACTb,YAAc,IAJT,E,gEAQO,IAAD,OACfuC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAU,EAAKZ,SAAS,CAAElB,OAAS8B,S,+BAMpC,IAAD,EAC2Bb,KAAKJ,MAA7Bb,EADH,EACGA,OAASb,EADZ,EACYA,YACV4C,EAAiBd,KAAKJ,MAAMb,OAAOgC,QAAO,SAACC,GAC7C,OAAOA,EAAMtC,KAAKuC,cAAcC,SAAShD,EAAY+C,kBAGzD,OAASlC,EAAOoC,OAGZ,yBAAK/C,UAAY,MACb,wBAAIA,UAAY,MAAhB,eACA,kBAAC,EAAD,CAAWD,aAAgB6B,KAAKK,iBAChC,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUtB,OAAU+B,OAP/B,2C,GAzBKZ,IAAMC,WCCxBiB,IAASC,OACP,6BACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SPwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAEdC,OAAM,SAAA/B,GACLgC,QAAQhC,MAAMA,EAAMiC,a","file":"static/js/main.cb0e7b5f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) =>{\r\n    return(\r\n        <div className = 'pa2'>\r\n            <input \r\n            className = 'pa3 ba b--green bg-lightest-blue'\r\n            type = 'search' \r\n            placeholder = 'search robots'\r\n            onChange = {searchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Card = ({id, name, email}) => {\r\n    return (\r\n        <div className = \"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n            <img alt = 'robots' src = {`https://robohash.org/${id}?200x200`} />\r\n            <div>\r\n                 <h2>{name}</h2>\r\n                 <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from  './Card.js';\r\n\r\n\r\nconst Cardlist = ({robots}) => {\r\n    return(\r\n        <div>\r\n            {\r\n                robots.map((user, i) => {\r\n                    return <Card key = {i} id = {robots[i].id} name = {robots[i].name} email = {robots[i].email}/>;\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Cardlist;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n      <div style = {{overflowY: 'scroll' , border: '1px solid black', height: '500px'}}>\r\n          {props.children}\r\n      </div>\r\n   );\r\n}\r\n\r\nexport default Scroll;","import React from 'react';\r\n\r\nclass ErrorBoundary extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            hasError : false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info){\r\n        this.setState({ hasError: true });\r\n    }\r\n\r\n    render(){\r\n        if(this.state.hasError){\r\n            return <h1> Oooooopps we have an error here</h1>;\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\nexport default ErrorBoundary;","import React from 'react';\r\nimport SearchBox from '../Components/SearchBox';\r\nimport CardList from '../Components/Cardlist.js';\r\nimport Scroll from '../Components/Scroll.js';\r\nimport ErrorBoundary from '../Components/ErrorBoundary.js';\r\n\r\nclass App extends React.Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            robots : [],\r\n            searchfield : ''\r\n        }\r\n    }\r\n    \r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(users => {this.setState({ robots : users})});\r\n    }\r\n    onSearchChange = (event) =>{\r\n        this.setState({ searchfield : event.target.value });\r\n    }\r\n\r\n    render(){\r\n        const {robots , searchfield} = this.state;\r\n        const filteredRobots = this.state.robots.filter((robot) => {\r\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n        })\r\n\r\n        return  !robots.length ?\r\n             <h1>Loading</h1>\r\n         :\r\n            <div className = 'tc'>\r\n                <h1 className = 'f1'>RoboFriends</h1>\r\n                <SearchBox searchChange = {this.onSearchChange}/>\r\n                <Scroll>\r\n                    <ErrorBoundary>\r\n                        <CardList robots = {filteredRobots} />\r\n                    </ErrorBoundary>\r\n                </Scroll>\r\n            </div>\r\n        \r\n      \r\n    }\r\n    \r\n}\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\nimport App from './Container/App.js';\r\n\r\nReactDOM.render( \r\n  <div>\r\n    <App />\r\n  </div>\r\n, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}